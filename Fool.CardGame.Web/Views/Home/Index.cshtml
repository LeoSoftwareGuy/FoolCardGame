
<div id="loginBlock">
    <input type="text" id="nameInput" placeholder="Name" />
    <button class="btn btn-info" onclick="login()">Lets Play</button>
</div>

<div id="logoutBlock">
    <div>
        <label id="nameLabel"></label>
        <button class="btn btn-danger" id="logoutBtn" onclick="logout()">Logout</button>
    </div>
    <button class="btn btn-success createTableBtn" onclick="createTable()">Create Table</button>
</div>


<div id="tablesContainer">
    <div id="tables">
    </div>
</div>


<div id="main" class="hidden">
    <label id="gameStatus"></label>
    <button id="startGame" class="btn btn-info hidden" onclick="startGame()">Start Game</button>
    <div id="playingCardsContainer">
        <div id="playingCards"></div>
        <button id="playingCards_btn_attack" class="btn btn-light hidden" onclick="makeAMove()">Make A Move</button>
        <button id="playingCards_btn_defend" class="btn btn-light hidden" onclick="defend()">Defend</button>
    </div>
    <div id="field"></div>
    <div id="deck"></div>
    <div id="players"></div>
</div>


<div class="hidden">
    <div class="playingCard">
        <div class="playingCard__info">
            <label class="playingCard_info_rank">6</label>
            <label class="playingCard_info_suit">♦</label>
        </div>
        <label class="playingCard_info_largeSuit"></label>
    </div>
    <div class="defendingCard">
        <div class="playingCard__info">
            <label class="playingCard_info_rank">6</label>
            <label class="playingCard_info_suit">♦</label>
        </div>
        <label class="playingCard_info_largeSuit"></label>
    </div>
    <div class="deck_card_shirt">
        <label class="deck_card_number"></label>
    </div>
    <div class="playingTable">
        <button class="btn btn-dark playingTable__btn" onclick="sitToTheTableClick(this)">Sit Here</button>
    </div>
    <div class="player">
        <img class="player__img" src="/images/player.png" />
        <label class="player__name"></label>
        <div class="player__cards">
            <div class="player__card"></div>
        </div>
    </div>
</div>

<script>
    var user = {};
    var gameStatus = null;
    var authCookieName = 'auth_cookie';
    var authCookieSecret = 'auth_secret';
    init();

    function init() {
        let cookieName = getCookie(authCookieName);
        let cookieSecret = getCookie(authCookieSecret);

        if (cookieName == null || cookieSecret == null) {
            document.getElementById('main').classList.add('hidden');
            document.getElementById('logoutBlock').classList.add('hidden');
            document.getElementById('loginBlock').classList.remove('hidden');

        } else {
            user.name = cookieName;
            user.secret = cookieSecret;
            document.getElementById('loginBlock').classList.add('hidden');
            document.getElementById('logoutBlock').classList.remove('hidden');
            document.getElementById('main').classList.remove('hidden');
            getStatus();
        }

        if (user.name) {
            document.getElementById('nameLabel').innerHTML = user.name;
        }
        else {
            document.getElementById('nameLabel').innerHTML = '';
        }
    }

    // You create 2 cookies when you login
    function login() {
        let name = document.getElementById('nameInput').value;
        let secret = generateGuid();

        setCookie(authCookieName, name, 1);
        setCookie(authCookieSecret, secret, 1)
        init();
    }

    // You delete 2 cookies when you logout
    function logout() {
        deleteCookie(authCookieName);
        deleteCookie(authCookieSecret);
        init();
    }

    function deleteCookie(name) {
        document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        } else if (days === 0) {
            expires = "; expires=Thu, 01 Jan 1970 00:00:00 UTC"; // Set to a date in the past
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function generateGuid() {
        return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
            (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
        );
    }


    function createTable() {
        SendRequest({
            method: 'POST',
            url: '/Home/CreateTable',
            body: {},
            success: function (data) {
                let tableId = JSON.parse(data.responseText);
                sitToTheTable(tableId);
            },
            error: function (data) {
                alert("Something went wrong during creating of table")
            }
        });
    }

    function sitToTheTableClick(element) {
        debugger;
        let tableId = element.closest('.playingTable').getAttribute('table-id');
        sitToTheTable(tableId);
    }

    // passing params as if its GET method, bad approach but for some reason POST does not work.
    function sitToTheTable(tableId) {
        SendRequest({
            method: 'POST',
            url: '/Home/JoinTable',
            body: {
                playerSecret: user.secret,
                playerName: user.name,
                tableGuid: tableId
            },
            success: function (data) {
                getStatus()
            },
            error: function (data) {
                alert("Something went wrong during creating of table")
            }
        });
    }

    function startGame() {
        SendRequest({
            method: 'POST',
            url: '/Home/StartGame',
            body: {
                tableId: gameStatus.table.id,
                playerSecret: user.secret
            },
            success: function (data) {
                getStatus();
            },
            error: function (data) {
                alert("Attack method did not work")
            }
        });
    }

    function getStatus() {
        SendRequest({
            method: 'GET',
            url: '/Home/GetStatus?playerSecret=' + user.secret,
            success: function (data) {
                let status = JSON.parse(data.responseText);
                gameStatus = status;
                // clear hand, deck and trump cards to refresh the state
                document.getElementById('playingCards').innerHTML = '';
                document.getElementById('deck').innerHTML = '';
                document.getElementById('field').innerHTML = '';
                document.getElementById('tables').innerHTML = '';
                document.getElementById('players').innerHTML = '';
                document.getElementById('gameStatus').innerHTML = '';

                if (status.table == null) {
                    drawTables(status);
                } else {
                    drawHand(status);
                    if (status.table.trump != null) {
                        let trumpCard = status.table.trump;
                        let trumpCardDiv = document.getElementsByClassName('playingCard')[0].cloneNode(true);
                        // trumpCardDiv.innerHTML = '';

                        trumpCardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(trumpCard.rank);
                        trumpCardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(trumpCard.suit);
                        document.getElementById('deck').appendChild(trumpCardDiv);
                    }

                    if (status.table.deckCardsCount > 1) {
                        let cardDiv = document.getElementsByClassName('deck_card_shirt')[0].cloneNode(true);
                        cardDiv.getElementsByClassName('deck_card_number')[0].innerHTML = status.table.deckCardsCount;
                        document.getElementById('deck').appendChild(cardDiv);
                    }

                    drawBattleField(status);
                    drawPlayersAndTheirHands(status);
                    drawGameStatus(status);
                }
            },
            error: function (data) {
                alert("Something went wrong during creation of table")
            }
        });
    }


    function drawHand(status) {
        if (status.table.playerHand.length > 0) {
            let originalPlayingCardDiv = document.getElementsByClassName('playingCard')[0];
            let fragment = document.createDocumentFragment();

            for (let cardIndex = 0; cardIndex < status.table.playerHand.length; cardIndex++) {
                let card = status.table.playerHand[cardIndex];
                let cardDiv = originalPlayingCardDiv.cloneNode(true);

                // Add event listener to the card div
                cardDiv.addEventListener('click', function (event) {
                    // Toggle the active class on the card div itself, not the label
                    if (this.classList.contains('active')) {
                        this.classList.remove('active');
                    } else {
                        this.classList.add('active');
                    }
                    checkMoves();
                });

                cardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(card.rank, card.suit);
                cardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(card.suit);
                cardDiv.getElementsByClassName('playingCard_info_largeSuit')[0].innerHTML = getSuit(card.suit);

                fragment.appendChild(cardDiv);
            }
            document.getElementById('playingCards').appendChild(fragment);
        }
    }


    function drawTables(status) {
        let originalTableDiv = document.getElementsByClassName('playingTable')[0];
        let fragment = document.createDocumentFragment();

        for (let i = 0; i < status.tables.length; i++) {
            let table = status.tables[i];
            let tableDiv = originalTableDiv.cloneNode(true);

            let buttonElement = tableDiv.querySelector('.playingTable__btn');
            tableDiv.appendChild(buttonElement);
            tableDiv.setAttribute('table-id', table.id);

            for (var j = 0; j < table.players.length; j++) {
                let player = table.players[j];
                let playerLabel = document.createElement("label");
                playerLabel.innerHTML = player.name;
                playerLabel.classList.add('playingTable_player_name');
                tableDiv.appendChild(playerLabel);
            }
            fragment.appendChild(tableDiv);
        }
        document.getElementById('tables').appendChild(fragment);
    }


    function drawBattleField(status) {
        if (status.table.cardsOnTheTable.length > 0) {
            // Cache the original card element before the loop
            let originalCardDiv = document.getElementsByClassName('playingCard')[0];
            let originalDefendingCardDiv = document.getElementsByClassName('defendingCard')[0];
            // Create a document fragment to batch append operations
            let fragment = document.createDocumentFragment();

            for (let i = 0; i < status.table.cardsOnTheTable.length; i++) {
                let cardOnTheTable = status.table.cardsOnTheTable[i];
                let cardDiv = originalCardDiv.cloneNode(true);

                cardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(cardOnTheTable.attackingCard.rank, cardOnTheTable.attackingCard.suit);
                cardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(cardOnTheTable.attackingCard.suit);


                if (cardOnTheTable.defendingCard) {
                    let defendingCardDiv = originalDefendingCardDiv.cloneNode(true);
                    defendingCardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(cardOnTheTable.defendingCard.rank, cardOnTheTable.defendingCard.suit);
                    defendingCardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(cardOnTheTable.defendingCard.suit);
                    defendingCardDiv.getElementsByClassName('playingCard_info_largeSuit')[0].innerHTML = getSuit(cardOnTheTable.defendingCard.suit);
                    fragment.appendChild(defendingCardDiv);
                } else {
                    cardDiv.addEventListener('click', function (event) {
                        if (this.classList.contains('active')) {
                            this.classList.remove('active');
                        } else {
                            this.classList.add('active');
                        }
                        checkMoves();
                    });
                }
                fragment.appendChild(cardDiv);
            }
            document.getElementById('field').appendChild(fragment);
        }
    }

    // We need to draw people clock wise
    // If our index is 3 then 2 1 3 5 4
    function drawPlayersAndTheirHands(status) {
        let playerIndexes = [];
        for (let i = status.table.myIndex - 1; i >= 0; i--) {
            playerIndexes.push({ index: i, gameIndex: i });
        }
        for (let i = status.table.players.length - 1; i >= status.table.myIndex; i--) {
            playerIndexes.push({ index: i, gameIndex: i + 1 });
        }

        let originalPlayerDiv = document.getElementsByClassName('player')[0];
        let originalPlayerCardsDiv = document.getElementsByClassName('player__card')[0]
        let fragmentForPlayers = document.createDocumentFragment();

        for (let i = 0; i < playerIndexes.length; i++) {
            let playerIndex = playerIndexes[i].index;
            let player = status.table.players[playerIndex];
            let playerDiv = originalPlayerDiv.cloneNode(true);

            playerDiv.getElementsByClassName('player__name')[0].innerHTML = player.name;
            playerDiv.getElementsByClassName('player__name')[0].title = player.name;
            // Clear any previous cards in this playerDiv
            let playerCardsDiv = playerDiv.getElementsByClassName('player__cards')[0];
            playerCardsDiv.innerHTML = ''; // Clear any previous cards

            if (playerIndex.gameIndex == status.table.activePlayerIndex) {
                playerDiv.classList.add('active');
            }

            fragmentForPlayers.appendChild(playerDiv);


            for (let j = 0; j < player.cardsCount; j++) {
                let cardDiv = originalPlayerCardsDiv.cloneNode(true);
                playerCardsDiv.appendChild(cardDiv);
            }
        }

        document.getElementById('players').appendChild(fragmentForPlayers);
    }


    function drawGameStatus(status) {
        if (status.table.status != null && status.table.status != undefined) {
            document.getElementById('gameStatus').innerHTML = status.table.status;

            if (status.table.ownerSecretKey != null) {
                if (status.table.status == 'ReadyToBegin' && user.secret == status.table.ownerSecretKey) {
                    document.getElementById('startGame').classList.remove('hidden');
                } else {
                    document.getElementById('startGame').classList.add('hidden');
                }
            }
        }
    }

    function checkMoves() {
        // shows move button to attack if hand cards are selected
        let activeCardsOnTheHand = document.querySelectorAll('#playingCardsContainer .playingCard.active');
        if (activeCardsOnTheHand.length > 0) {
            document.getElementById('playingCards_btn_attack').classList.remove('hidden');
        } else {
            document.getElementById('playingCards_btn_attack').classList.add('hidden');
        }


        // shows defend button if table cards are selected
        let activeCardsOnTheBattleField = document.querySelectorAll('#field .playingCard.active');
        // only 1 card should be selected as attackign and 1 as defending
        if (activeCardsOnTheBattleField.length == 1 && activeCardsOnTheHand.length == 1) {
            document.getElementById('playingCards_btn_defend').classList.remove('hidden');
        } else {
            document.getElementById('playingCards_btn_defend').classList.add('hidden');
        }
    }


    function defend() {
        let defendingCard = document.querySelector('#playingCards .playingCard.active');
        let attackingCard = document.querySelector('#field .playingCard.active');

        if (defendingCard && attackingCard) {
            let defendingCardIndex = Array.prototype.indexOf.call(defendingCard.parentNode.children, defendingCard);
            let attackingCardIndex = Array.prototype.indexOf.call(attackingCard.parentNode.children, attackingCard);

            SendRequest({
                method: 'POST',
                url: '/Home/Defend',
                body: {
                    tableId: gameStatus.table.id,
                    playerSecret: user.secret,
                    defendingCardIndex: defendingCardIndex,
                    attackingCardIndex: attackingCardIndex
                },
                success: function (data) {
                    getStatus();
                },
                error: function (data) {
                    alert("Attack method did not work");
                }
            });
        }
    }



    function makeAMove() {
        let selectedCards = document.querySelectorAll('#playingCardsContainer .playingCard.active');
        let cardIndexes = [];
        if (selectedCards.length > 0) {
            let cards = document.querySelectorAll('#playingCards .playingCard');
            for (let i = 0; i < cards.length; i++) {
                if (cards[i].classList.contains('active')) {
                    cardIndexes.push(i);
                }
            }
            SendRequest({
                method: 'POST',
                url: '/Home/Attack',
                body: {
                    playerSecret: user.secret,
                    tableId: gameStatus.table.id,
                    cardIds: cardIndexes
                },
                success: function (data) {
                    getStatus();
                },
                error: function (data) {
                    alert("Attack method did not work")
                }
            });
        }
    }



    function getRank(value, suitChar) {
        if (suitChar === '♦' || suitChar === '♥') {
            return "<label style='color:red'>" + value + "</label>";
        } else {
            return value;
        }
    }

    function getSuit(suitChar) {
        if (suitChar === '♦' || suitChar === '♥') {
            return "<label style='color:red'>" + suitChar + "</label>";
        } else {
            return suitChar;
        }
    }





</script>
<style>
    /* CSS for the hidden class */


    .hidden {
        display: none !important;
    }

    #logoutBlock {
        width: 100%;
        display: flex;
        justify-content: space-between;
    }

    #tablesContainer {
        margin-top: 4rem;
    }

    #tables {
        display: flex;
        flex-wrap: wrap;
        column-gap: 1rem;
    }


    #main {
        margin-top: 1rem;
        width: 100%;
    }

    .gameStatus {
        padding: 1rem 1rem;
        font-size: 1.5rem;
        font-weight: 500;
        text-align: center;
    }

    .createTableBtn {
    }

    .playingTable {
        position: relative;
        min-height: 10rem;
        min-width: 10rem;
        border: 1px solid rgba(0,0,0,.125);
        background-color: #fff;
        border-radius: 5rem;
    }

        .playingTable.active {
            border-color: rgba(0,0,0,.5); /* Darker border */
            background-color: #f0f0f0; /* Slightly different background color */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Add shadow */
        }

    .playingTable__btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        left: 29%;
        padding: 0.30rem 0.6rem;
        font-size: 0.7rem;
    }

    .playingTable_player_name {
        display: block;
        margin: 1rem 0 0 1.7rem;
        display: block;
        font-size: 0.6rem;
    }

    #field {
        margin-top: 4rem;
        width: 100%;
        display: flex;
        align-items: center;
        column-gap: 1.5rem;
        flex-wrap: wrap;
    }

    #deck {
        margin-top: 4rem;
        width: 100%;
        display: flex;
        position: relative;
        align-items: center;
        justify-content: center;
    }

    #playingCards_btn_attack {
        margin-top: 1rem;
    }

    #playingCardsContainer {
        margin-top: 3rem;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #playingCards {
        margin-bottom: 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
        column-gap: 0.2rem;
    }

    .playingCard {
        position: relative;
        z-index:0;
        width: 3rem;
        height: 6rem;
        border: 1px solid rgba(0,0,0,.125);
        background-color: #fff;
        border-radius: .25rem;
    }

    .defendingCard{
        margin-top:2rem;
        position: absolute;
        z-index:2;
        width: 3rem;
        height: 6rem;
        border: 1px solid rgba(0,0,0,.125);
        background-color: #fff;
        border-radius: .25rem;
    }


        .playingCard.active {
            width: 3.5rem; /* Increase width */
            height: 7rem; /* Increase height */
            border-color: rgba(0,0,0,.5); /* Darker border */
            background-color: #f0f0f0; /* Slightly different background color */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Add shadow */
        }

    .playingCard__info {
        margin-left: .2rem;
        width: 100%;
        max-height: 1rem;
        display: flex;
        justify-content:space-between;
        align-items:center;
    }

    .playingCard_info_rank {
        display: block;
        font-size: 1.0rem;
        font-weight: 500;
    }

    .playingCard_info_suit {
        padding-right:.3rem;
        font-size: 1.2rem;
        font-weight: 500;
    }

    .playingCard_info_largeSuit {
        margin-top: 0.4rem;
        font-size: 2.9rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }


    .deck_card_shirt {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 6rem;
        height: 3rem;
        border: 1px solid rgba(0,0,0,.125);
        background: repeating-linear-gradient( 45deg, #606dbc, #606dbc 10px, #465298 10px, #465298 20px);
        border-radius: .25rem;
    }

    .deck_card_number {
        margin: auto;
        width: 100%;
        color: white;
        font-weight: 500;
        font-size: 1.2rem;
        text-align: center;
    }


    #players {
        margin: 3rem 0 2rem 0;
        text-align: center;
    }

    .player {
        margin-left: 4rem;
        display: inline-block;
    }

    .player__img {
        margin: auto;
        width: 64px;
        height: 64px;
    }

    .player__name {
        display: block;
        font-size: 0.7rem;
        font-weight: 500;
        max-width: 100px;
        text-overflow: clip;
        white-space: nowrap;
        overflow: hidden;
    }

    .player__cards {
        margin-top: 0.5rem;
        display: flex;
    }

    .player__card {
        margin-left: -.2rem;
        display: inline-block;
        width: 0.7rem;
        height: 3rem;
        border: 1px solid rgba(0,0,0,.125);
        background: repeating-linear-gradient( 45deg, #606dbc, #606dbc 10px, #465298 10px, #465298 20px);
        border-radius: .25rem;
    }

        .player__card:last-child {
            width: 1.4rem;
        }

    .player.active .player__img {
        border: 2px solid blue;
    }

</style>