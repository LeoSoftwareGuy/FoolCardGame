
<div id="loginBlock">
    <input type="text" id="nameInput" placeholder="Name" />
    <button class="btn btn-info" onclick="login()">Lets Play</button>
</div>

<div id="logoutBlock">
    <div>
        <label id="nameLabel"></label>
        <button class="btn btn-danger" id="logoutBtn" onclick="logout()">Logout</button>
    </div>
    <button class="btn btn-success createTableBtn" onclick="createTable()">Create Table</button>
</div>


<div id="tablesContainer">
    <div id="tables">
    </div>
</div>


<div id="main" class="hidden">
    <div id="playingCardsContainer">
        <div id="playingCards" />
        <button id="play__btn" class="btn btn-light hidden" onclick="makeAMove()">Make A Move</button>
    </div>
    <div id="field"></div>
    <div id="deck"></div>
    <div id="players"></div>
</div>


<div class="hidden">
    <div class="playingCard">
        <div class="playingCard__info">
            <label class="playingCard_info_rank">6</label>
            <label class="playingCard_info_suit">♦</label>
        </div>
    </div>
    <div class="deck_card_shirt">
        <label class="deck_card_number"></label>
    </div>
    <div class="playingTable" />
    <div class="player">
        <img src="https://uxwing.com/wp-content/themes/uxwing/download/peoples-avatars/man-person-icon.png" />
    </div>
</div>

<script>
    var user = {};
    var gameStatus = null;
    var authCookieName = 'auth_cookie';
    var authCookieSecret = 'auth_secret';
    init();

    function init() {
        let cookieName = getCookie(authCookieName);
        let cookieSecret = getCookie(authCookieSecret);

        if (cookieName == null || cookieSecret == null) {
            document.getElementById('main').classList.add('hidden');
            document.getElementById('logoutBlock').classList.add('hidden');
            document.getElementById('loginBlock').classList.remove('hidden');

        } else {
            user.name = cookieName;
            user.secret = cookieSecret;
            document.getElementById('loginBlock').classList.add('hidden');
            document.getElementById('logoutBlock').classList.remove('hidden');
            document.getElementById('main').classList.remove('hidden');
            getStatus();
        }

        if (user.name) {
            document.getElementById('nameLabel').innerHTML = user.name;
        }
        else {
            document.getElementById('nameLabel').innerHTML = '';
        }
    }

    // You create 2 cookies when you login
    function login() {
        let name = document.getElementById('nameInput').value;
        let secret = generateGuid();

        setCookie(authCookieName, name, 1);
        setCookie(authCookieSecret, secret, 1)
        init();
    }

    // You delete 2 cookies when you logout
    function logout() {
        deleteCookie(authCookieName);
        deleteCookie(authCookieSecret);
        init();
    }

    function deleteCookie(name) {
        document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        } else if (days === 0) {
            expires = "; expires=Thu, 01 Jan 1970 00:00:00 UTC"; // Set to a date in the past
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

    function generateGuid() {
        return "10000000-1000-4000-8000-100000000000".replace(/[018]/g, c =>
            (+c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> +c / 4).toString(16)
        );
    }


    function createTable() {
        SendRequest({
            method: 'POST',
            url: '/Home/CreateTable',
            body: {},
            success: function (data) {
                let tableId = JSON.parse(data.responseText);
                sitToTheTable(tableId);
            },
            error: function (data) {
                alert("Something went wrong during creating of table")
            }
        });
    }

    // passing params as if its GET method, bad approach but for some reason POST does not work.
    function sitToTheTable(tableId) {
        SendRequest({
            method: 'POST',
            url: '/Home/JoinTable',
            body: {
                playerSecret: user.secret,
                playerName: user.name,
                tableGuid: tableId
            },
            success: function (data) {
                getStatus()
            },
            error: function (data) {
                alert("Something went wrong during creating of table")
            }
        });
    }


    function getStatus() {
        SendRequest({
            method: 'GET',
            url: '/Home/GetStatus?playerSecret=' + user.secret,
            success: function (data) {
                let status = JSON.parse(data.responseText);
                gameStatus = status;
                debugger;
                // clear hand, deck and trump cards to refresh the state
                document.getElementById('playingCards').innerHTML = '';
                document.getElementById('deck').innerHTML = '';
                document.getElementById('field').innerHTML = '';
                document.getElementById('tables').innerHTML = '';

                if (status.table == null) {
                    // we need to draw available tables for the user to sit at
                    for (let i = 0; i < status.tables.length; i++) {
                        let table = status.tables[i];
                        let tableDiv = document.getElementsByClassName('playingTable')[0].cloneNode(true);

                        tableDiv.addEventListener('click', function (event) {
                            if (this.classList.contains('active')) {
                                this.classList.remove('active');
                            } else {
                                this.classList.add('active');
                            }
                            // checkMoves();
                        });
                        document.getElementById('tables').appendChild(tableDiv);
                    }
                } else {
                    for (let cardIndex = 0; cardIndex < status.table.playerHand.length; cardIndex++) {
                        let card = status.table.playerHand[cardIndex];
                        let cardDiv = document.getElementsByClassName('playingCard')[0].cloneNode(true);

                        // Add event listener to the card div
                        cardDiv.addEventListener('click', function (event) {
                            // Toggle the active class on the card div itself, not the label
                            if (this.classList.contains('active')) {
                                this.classList.remove('active');
                            } else {
                                this.classList.add('active');
                            }
                            checkMoves();
                        });

                        cardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(card.rank, card.suit);
                        cardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(card.suit);

                        document.getElementById('playingCards').appendChild(cardDiv);
                    }

                    if (status.table.trump != null) {
                        let trumpCard = status.table.trump;
                        let trumpCardDiv = document.getElementsByClassName('playingCard')[0].cloneNode(true);

                        trumpCardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(trumpCard.rank);
                        trumpCardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(trumpCard.suit);
                        document.getElementById('deck').appendChild(trumpCardDiv);
                    }

                    if (status.table.deckCardsCount > 1) {
                        let cardDiv = document.getElementsByClassName('deck_card_shirt')[0].cloneNode(true);
                        cardDiv.getElementsByClassName('deck_card_number')[0].innerHTML = status.table.deckCardsCount;
                        document.getElementById('deck').appendChild(cardDiv);
                    }

                    for (let i = 0; i < status.table.cardsOnTheTable.length; i++) {
                        let attackingCard = status.table.cardsOnTheTable[i].attackingCard;
                        let cardDiv = document.getElementsByClassName('playingCard')[0].cloneNode(true);

                        debugger;
                        cardDiv.getElementsByClassName('playingCard_info_rank')[0].innerHTML = getRank(attackingCard.rank, attackingCard.suit);
                        cardDiv.getElementsByClassName('playingCard_info_suit')[0].innerHTML = getSuit(attackingCard.suit);

                        // here should put another on it as defending
                        document.getElementById('field').appendChild(cardDiv);
                    }


                    for (let i = 0; i < status.table.players.length; i++) {
                        let playerDiv = document.getElementsByClassName('player')[0].cloneNode(true);   
                        document.getElementById('players').appendChild(playerDiv);
                    }
                }
            },
            error: function (data) {
                alert("Something went wrong during creation of table")
            }
        });
    }

    function checkMoves() {
        let selectedCard = document.querySelectorAll('.playingCard.active');
        if (selectedCard.length > 0) {
            document.getElementById('play__btn').classList.remove('hidden');
        } else {
            document.getElementById('play__btn').classList.add('hidden');
        }
    }

    function makeAMove() {
        let selectedCards = document.querySelectorAll('.playingCard.active');
        let cardIndexes = [];
        if (selectedCards.length > 0) {
            let cards = document.querySelectorAll('#playingCards .playingCard');
            for (let i = 0; i < cards.length; i++) {
                if (cards[i].classList.contains('active')) {
                    cardIndexes.push(i);
                }
            }
            SendRequest({
                method: 'POST',
                url: '/Home/Attack',
                body: {
                    playerSecret: user.secret,
                    playerName: user.name,
                    cardIds: cardIndexes
                },
                success: function (data) {
                    getStatus();
                },
                error: function (data) {
                    alert("Attack method did not work")
                }
            });
        }
    }

    function getRank(value, suitChar) {
        if (suitChar === '♦' || suitChar === '♥') {
            return "<label style='color:red'>" + value + "</label>";
        } else {
            return value;
        }
    }

    function getSuit(suitChar) {
        if (suitChar === '♦' || suitChar === '♥') {
            return "<label style='color:red'>" + suitChar + "</label>";
        } else {
            return suitChar;
        }
    }



</script>
<style>
    /* CSS for the hidden class */
    .hidden {
        display: none !important;
    }

    #logoutBlock {
        width: 100%;
        display: flex;
        justify-content: space-between;
    }

    #tablesContainer {
        margin-top: 4rem;
    }

    #tables {
        display: flex;
        flex-wrap: wrap;
        column-gap: 1rem;
    }


    #main {
        margin-top: 1rem;
        width: 100%;
    }

    .createTableBtn {
    }

    .playingTable {
        min-height: 10rem;
        min-width: 10rem;
        border: 1px solid rgba(0,0,0,.125);
        background-color: #fff;
        border-radius: 5rem;
    }

        .playingTable.active {
            border-color: rgba(0,0,0,.5); /* Darker border */
            background-color: #f0f0f0; /* Slightly different background color */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Add shadow */
        }

    #field {
        margin-top: 4rem;
        width: 100%;
        display: flex;
        align-items: center;
        column-gap: 1.5rem;
        flex-wrap: wrap;
    }

    #deck {
        margin-top: 6rem;
        width: 100%;
        display: flex;
        position: relative;
        align-items: center;
        justify-content: center;
    }

    #play__btn {
        margin-top: 1rem;
    }

    #playingCardsContainer {
        margin-top: 3rem;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    #playingCards {
        margin-bottom: 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
        column-gap: 0.2rem;
    }

    .playingCard {
        width: 3rem;
        height: 6rem;
        border: 1px solid rgba(0,0,0,.125);
        background-color: #fff;
        border-radius: .25rem;
    }

        .playingCard.active {
            width: 3.5rem; /* Increase width */
            height: 7rem; /* Increase height */
            border-color: rgba(0,0,0,.5); /* Darker border */
            background-color: #f0f0f0; /* Slightly different background color */
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Add shadow */
        }

    .playingCard__info {
        margin-left: .2rem;
        width: 100%;
        max-height: 1rem;
        display: flex;
        flex-direction: column;
        column-gap: .01rem;
    }

    .playingCard_info_rank {
        display: block;
        font-size: 1.0rem;
        font-weight: 500;
    }

    .playingCard_info_suit {
        display: block;
        font-size: 3.2rem;
        font-weight: 500;
    }



    .deck_card_shirt {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 6rem;
        height: 3rem;
        border: 1px solid rgba(0,0,0,.125);
        background: repeating-linear-gradient( 45deg, #606dbc, #606dbc 10px, #465298 10px, #465298 20px);
        border-radius: .25rem;
    }

    .deck_card_number {
        margin: auto;
        width: 100%;
        color: white;
        font-weight: 500;
        font-size: 1.2rem;
        text-align: center;
    }

</style>